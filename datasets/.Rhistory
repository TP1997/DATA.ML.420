plot(Ipp3$x, Ipp3$y, main="IPP, intensity(x,y)=lambda3\n100 points",pch=20,xlab='x',ylab='y')
# iii)
# Based on the plots, the generated data seems to be heterogenous in all cases
# iv)
sip = sipgen(100, 0.02)
pointmap( as.points(sip$pts) )
plot(Ipp1$x, Ipp1$y, main="IPP, intensity(x,y)=lambda1\n100 points",pch=20,xlab='x',ylab='y')
plot(Ipp2$x, Ipp2$y, main="IPP, intensity(x,y)=lambda2\n100 points",pch=20,xlab='x',ylab='y')
plot(Ipp3$x, Ipp3$y, main="IPP, intensity(x,y)=lambda3\n100 points",pch=20,xlab='x',ylab='y')
setwd('/home/tuomas/R/Projects/DATA.ML420/datasets')
acex1 = read.table('acex1.txt', header=F)
acex2 = read.table('acex2.txt', header=F)
acex3 = read.table('acex3.txt', header=F)
# Rook's weighting
weight = function(i,j){
n=5
neighs = c(((i%%n)!=1)*(i-1), ((i%%n)>0)*(i+1), i-n, i+n)
w = as.numeric(j %in% neighs)
return(w)
}
S0 = function(){
n=5
sw = 0
for (i in 1:(n*n)) {
for (j in 1:(n*n)) {
sw = sw + weight(i,j)
}
}
return(sw)
}
Moran.I = function(data){
n=5
z.bar = mean(data)
num = 0
denom = 0
for (i in 1:(n*n)) {
for (j in 1:(n*n)) {
w = weight(i,j)
if (i==j){
w = 0
}
num = num + w*(data[i]-z.bar)*(data[j]-z.bar)
}
denom = denom + (data[i]-z.bar)^2
}
s0 = S0()
return(((n*n)/s0)*(num/denom))
}
Geary.c = function(data){
n=5
z.bar = mean(data)
num = 0
denom = 0
for (i in 1:(n*n)) {
for (j in 1:(n*n)) {
w = weight(i,j)
if (i==j){
w = 1
}
num = num + w*(data[i]-data[j])^2
}
denom = denom + (data[i]-z.bar)^2
}
s0 = S0()
return(((n-1)/s0)*(num/denom))
}
gc.1 = Geary.c(acex1.map)
# a)
acex1.map = t(array(data=acex1$V2, dim=c(5,5)))
acex2.map = t(array(data=acex2$V2, dim=c(5,5)))
acex3.map = t(array(data=acex3$V2, dim=c(5,5)))
gc.1 = Geary.c(acex1.map)
gc.1
x = c(61, 63,64, 68,71,73,75)
y = c(139,140, 129,128,140,141,128)
z = c(477,696,227,646,606,791,783)
plot(x,y)
setwd('/home/tuomas/R/Projects/DATA.ML420/datasets')
data = read.table('disease.txt', head=T)
head(data)
tail(data)
plot(data$x, data$y)
library(spatstat)
data.points = cbind(data$x, data$y)
head(data.points)
data(japanesepines)
japanesepines
?quadratcount
plot(data$x, data$y)
max(data$x)
max(data$y)
data.points = ppp(data$x, data$y, c(0,33),c(0,33) ) #cbind(data$x, data$y)
data.points
qcount = quadratcount(data.points, nx=10, ny=10)
qcount
plot(data.points)
plot(qcount, add=TRUE)
qcount = quadratcount(data.points, nx=7, ny=7)
plot(data.points)
plot(qcount, add=TRUE)
qtest = quadrat.test(data.points, nx=7, ny=7)
qtest
summary(qtest)
qtest
# G-function
plot(Gest(data.points))
r = seq(0,1.2, by=0.005)
env.g = envelope(data.points, fun=Gest, r=r, nrank=2, nsim=99)
plot(env.g)
#
plot(Kest(data.points))
#
plot(Kest(data.points))
env.k = envelope(data.points, fun=Kest, r=r, nrank=2, nsim=99)
plot(env.k)
# c)
library(splancs)
# HPP
hpp.fit = ppm(data.points, ~1)
?ppm
AIC(hpp.fit)
hpp.fit
summary(hpp.fit)
# IPP
ipp.fit = ppm(data.points, ~x+y)
AIC(ipp.fit)
AIC(hpp.fit)
?kppm
# PCP
pcp.fit = kppm(data.points, method ='mincon')
AIC(pcp.fit)
plot(envelope(pcp.fit, Gest, nsim = 39, global = TRUE))
plot(envelope(ipp.fit, Gest, nsim = 39, global = TRUE))
plot(envelope(hpp.fit, Gest, nsim = 39, global = TRUE))
summary(pcp.fit)
AIC(pcp.fit)
anova(ipp.fit, pcp.fit)
summary(pcp.fit)
plot(pcp.fit)
plot(envelope(pcp.fit, Gest, nsim = 39, global = TRUE))
plot(envelope(pcp.fit, Kest, nsim = 39, global = TRUE))
plot(envelope(hpp.fit, Kest, nsim = 39, global = TRUE))
plot(envelope(ipp.fit, Kest, nsim = 39, global = TRUE))
plot(envelope(pcp.fit, Kest, nsim = 39, global = TRUE))
# Based on the AIC's, IPP fits better
anova(hpp.fit, ipp.fit)
# Based on the AIC's, IPP fits better
anova(hpp.fit, ipp.fit, test='Chi')
AIC(pcp.fit)
# PCP
pcp.fit = kppm(data.points, method ='palm')
plot(envelope(pcp.fit, Kest, nsim = 39, global = TRUE))
AIC(ipp.fit)
anova(pcp.fit)
AIC(pcp.fit)
plot(envelope(ipp.fit, Kest, nsim = 39, global = TRUE))
# PCP
pcp.fit = kppm(data.points, method ='mincon')
AIC(pcp.fit)
# PCP
pcp.fit = kppm(data.points, method ='clik2')
AIC(pcp.fit)
plot(envelope(pcp.fit, Kest, nsim = 39, global = TRUE))
# PCP
pcp.fit = kppm(data.points, method ='mincon')
plot(envelope(pcp.fit, Kest, nsim = 39, global = TRUE))
residuals(pcp.fit)
sum(residuals(pcp.fit))
names(residuals(pcp.fit))
residuals(pcp.fit)$val
sum(residuals(pcp.fit)$val)
sum((residuals(pcp.fit)$val)^2
l
sum((residuals(pcp.fit)$val)^2)
sum((residuals(ipp.fit)$val)^2)
sum((residuals(hpp.fit)$val)^2)
sum((residuals(hpp.fit, type='pearson')$val)^2)
sum((residuals(ipp.fit, type='pearson')$val)^2)
sum((residuals(pcp.fit, type='pearson')$val)^2)
?kppm
dg.test(pcp.fit, nsim=40)
dg.test(pcp.fit)
dg.test(ipp.fit)
dg.test(hpp.fit)
plot(data$x, data$y)
x = c(61,63,64,68,71,73,75)
y = c(139,140,129,128,140,141,128)
z = c(477,696,227,646,606,791,783)
plot(x,y)
length(x)
length(y)
x = c(61,63,64,68,71,73,75)
y = c(139,140,129,128,140,141,128)
z = c(477,696,227,646,606,791,783)
plot(x,y)
c0 = 0    # nugget
c1 = 10   # partial sill
a = 3.33
# c)
s0 = c(65, 137)
dd = cbind(x, y)
n = length(x)
# Distance matrix
dist= matrix(0, nrow=n, ncol=n)
dist= matrix(0, nrow=n, ncol=n)
for (i in 1:n) {
for (j in i:n) {
dist[i,j] = ((dd[i,1]-dd[j,1])^2 + (dd[i,2]-dd[j,2])^2)^.5
}
}
G = matrix(NA, nrow=n, ncol=n)
for (i in 1:n-1) {
for (j in 1:n-1) {
G[i,j] = c0 + c1* exp (-dist[i,j]/a)
}
}
G[n,] = rep(1,n)
G[,n] = rep(1,n)
G[n,n] = 0
g
g
G
D = rep(0,n)
for (j in 1:m){
D[j] = c0 + c1* exp (-dist[i,j]/a)
}
D[n] = 1
D = rep(0,n)
for (j in 1:n){
D[j] = c0 + c1* exp (-dist[i,j]/a)
}
D[n] = 1
D = rep(0,n)
for (j in 1:n){
D[j] = c0 + c1* exp (-dist[i,j]/a)
}
D[n] = 1
D
# Ordinary kriging weights
wt = solve(G)%*%D
wt
sum(wt)
# Prediction variance
pred.var = c0+c1-t(wt) %*% D
z
t(z)
cbind(z)
cbind(t(z))
# Predicted value
z.pred = t(wt)%*%cbind(z)
z.pred
x = c(61,63,64,68,71,73,75,              65)
y = c(139,140,129,128,140,141,128,       137)
z = c(477,696,227,646,606,791,783)
# c)
dd = cbind(x, y)
n = length(x)
# Distance matrix
dist= matrix(0, nrow=n, ncol=n)
for (i in 1:n) {
for (j in i:n) {
dist[i,j] = ((dd[i,1]-dd[j,1])^2 + (dd[i,2]-dd[j,2])^2)^.5
}
}
# Gamma matrix
G = matrix(NA, nrow=n, ncol=n)
for (i in 1:n-1) {
for (j in 1:n-1) {
G[i,j] = c0 + c1* exp (-dist[i,j]/a)
}
}
G[n,] = rep(1,n)
G[,n] = rep(1,n)
G[n,n] = 0
# gamma vector
D = rep(0,n)
for (j in 1:n){
D[j] = c0 + c1* exp (-dist[i,j]/a)
}
D[n] = 1
wt = solve(G)%*%D
wt
# Predicted value
z.pred = t(wt)%*%cbind(z)
cbind(z,0)
# Predicted value
z.pred = t(wt)%*%cbind(c(z,0))
z.pred
# Prediction variance
pred.var = c0+c1-t(wt) %*% D
pred.var
t(wt) %*% D
# Prediction variance
pred.var = t(wt) %*% D
pred.var
# Predicted value
z.pred = t(wt)%*%cbind(c(z,0))
z.pred
wt
c0 = 10
# Gamma matrix
G.new = matrix(NA, nrow=n, ncol=n)
for (i in 1:n-1) {
for (j in 1:n-1) {
G.new[i,j] = c0 + c1* exp (-dist[i,j]/a)
}
}
G.new[n,] = rep(1,n)
G.new[,n] = rep(1,n)
G.new[n,n] = 0
# gamma vector
D.new = rep(0,n)
for (j in 1:n){
D.new[j] = c0 + c1* exp (-dist[i,j]/a)
}
D.new[n] = 1
# Ordinary kriging weights
wt.new = solve(G.new)%*%D.new
wt.new
# Predicted value
z.pred.new = t(wt.new)%*%cbind(c(z,0))
z.pred.new
# Prediction variance
pred.var.new = t(wt.new)%*%D.new
pred.var.new
wt
wt.new
min(wt)
max(wt)
max(wt.new)
min(wt.new)
z.pred.new
z.pred
# e)
get_G_uk = function(m, si, dist, sv_model){
# Compute the G (or Gamma) matrix for kriging system of equations:   G w=  D
G = matrix(0, nrow=m+dim(si)[2], ncol=m+dim(si)[2])
for (i in 1:m-1){
for (j in 1:m-1){
G[i,j] = c0 + c1* exp (-dist[i,j]/a)
}
}
G[m,0:(m-1)] = si[-7,1] #rbind(si[,1], rep(0,3))
G[0:(m-1),m] = si[-7,1]
G[m+1,0:(m-1)] = si[-7,2] #rbind(si[,2], rep(0,3))
G[0:(m-1),m+1] = si[-7,2]
G[m+dim(si)[2],0:(m-1)] = rep(1,m-1) #rbind(rep(1,m), rep(0,3))    # for Lagrange multiplier
G[0:(m-1),m+dim(si)[2]] = rep(1,m-1)
#G[m:,m:] = 0
return(G)
}
get_g_uk = function(m, s0, dist){
D = rep(0,m+length(s0))
for (j in 1:m){
D[j] = c0 + c1* exp (-dist[i,j]/a)
}
#D[m] = 1
#D[-(0:m)] = s0
D[m:(m+1)] = s0
D[m+length(s0)] = 1
return(D)
}
x = c(61,63,64,68,71,73,75,              65)
y = c(139,140,129,128,140,141,128,       137)
dist
n = length(x)
si = cbind(x, y)
G= get_G_uk(n, si, dist)
D = get_g_uk(m, si[6,], dist)
D = get_g_uk(n, si[6,], dist)
x = c(61,63,64,68,71,73,75,              65)
y = c(139,140,129,128,140,141,128,       137)
dist
n = length(x)
si = cbind(x, y)
G.u = get_G_uk(n, si, dist)
D.u = get_g_uk(n, si[6,], dist)
# Universal kriging weights
wt.u = solve(G.u)%*%D.u
wt.u
# Predicted value
z.pred.u = t(wt.u)%*%cbind(c(z,0))
# Predicted value
z.pred.u = t(wt.u)%*%cbind(c(z))
t(wt.u)
D.u
t(wt.u)
t(wt.u)[1:n]
# Predicted value
z.pred.u = t(wt.u)[1:n]%*%cbind(c(z))
cbind(c(z))
# Predicted value
z.pred.u = t(wt.u)[1:n-1]%*%cbind(c(z))
z.pred.u
# Prediction variance
pred.var.u = t(wt.u)%*%D.u
pred.var.u
plot(data$x, data$y)
dg.test(hpp.fit)
dg.test(ipp.fit)
dg.test(pcp.fit)
plot(envelope(ipp.fit, Kest, nsim = 39, global = TRUE))
plot(envelope(pcp.fit, Kest, nsim = 39, global = TRUE))
AIC(hpp.fit)
AIC(ipp.fit)
x = c(61,63,64,68,71,73,75,              65)
y = c(139,140,129,128,140,141,128,       137)
z = c(477,696,227,646,606,791,783)
plot(x,y)
c0 = 0    # nugget
c1 = 10   # partial sill
a = 3.33
# c)
dd = cbind(x, y)
n = length(x)
# Distance matrix
dist= matrix(0, nrow=n, ncol=n)
for (i in 1:n) {
for (j in i:n) {
dist[i,j] = ((dd[i,1]-dd[j,1])^2 + (dd[i,2]-dd[j,2])^2)^.5
}
}
# Gamma matrix
G = matrix(NA, nrow=n, ncol=n)
for (i in 1:n-1) {
for (j in 1:n-1) {
G[i,j] = c0 + c1* exp (-dist[i,j]/a)
}
}
G[n,] = rep(1,n)
G[,n] = rep(1,n)
G[n,n] = 0
# gamma vector
D = rep(0,n)
for (j in 1:n){
D[j] = c0 + c1* exp (-dist[i,j]/a)
}
D[n] = 1
# Ordinary kriging weights
wt = solve(G)%*%D
wt
z.pred = t(wt)%*%cbind(c(z,0))
z.pred
pred.var = t(wt) %*% D
pred.var
c0 = 10
# Gamma matrix
G.new = matrix(NA, nrow=n, ncol=n)
for (i in 1:n-1) {
for (j in 1:n-1) {
G.new[i,j] = c0 + c1* exp (-dist[i,j]/a)
}
}
G.new[n,] = rep(1,n)
G.new[,n] = rep(1,n)
G.new[n,n] = 0
# gamma vector
D.new = rep(0,n)
for (j in 1:n){
D.new[j] = c0 + c1* exp (-dist[i,j]/a)
}
D.new[n] = 1
# Ordinary kriging weights
wt.new = solve(G.new)%*%D.new
wt.new
z.pred.new = t(wt.new)%*%cbind(c(z,0))
z.pred.new
pred.var.new = t(wt.new)%*%D.new
pred.var.new
get_G_uk = function(m, si, dist, sv_model){
# Compute the G (or Gamma) matrix for kriging system of equations:   G w=  D
G = matrix(0, nrow=m+dim(si)[2], ncol=m+dim(si)[2])
for (i in 1:m-1){
for (j in 1:m-1){
G[i,j] = c0 + c1* exp (-dist[i,j]/a)
}
}
G[m,0:(m-1)] = si[-7,1] #rbind(si[,1], rep(0,3))
G[0:(m-1),m] = si[-7,1]
G[m+1,0:(m-1)] = si[-7,2] #rbind(si[,2], rep(0,3))
G[0:(m-1),m+1] = si[-7,2]
G[m+dim(si)[2],0:(m-1)] = rep(1,m-1) #rbind(rep(1,m), rep(0,3))    # for Lagrange multiplier
G[0:(m-1),m+dim(si)[2]] = rep(1,m-1)
#G[m:,m:] = 0
return(G)
}
get_g_uk = function(m, s0, dist){
D = rep(0,m+length(s0))
for (j in 1:m){
D[j] = c0 + c1* exp (-dist[i,j]/a)
}
#D[m] = 1
#D[-(0:m)] = s0
D[m:(m+1)] = s0
D[m+length(s0)] = 1
return(D)
}
x = c(61,63,64,68,71,73,75,              65)
y = c(139,140,129,128,140,141,128,       137)
dist
n = length(x)
si = cbind(x, y)
G.u = get_G_uk(n, si, dist)
D.u = get_g_uk(n, si[6,], dist)
# Universal kriging weights
wt.u = solve(G.u)%*%D.u
wt.u
z.pred.u = t(wt.u)[1:n-1]%*%cbind(c(z))
z.pred.u
pred.var.u = t(wt.u)%*%D.u
pred.var.u
qtest
